#   GENERATE BY startup.sh , DO NOT EDIT THIS FILE!
cmake_minimum_required(VERSION 3.22)
project(nju_dlco_cmake)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED true)

add_executable(sim)
target_compile_options(
	sim PUBLIC -Wall PUBLIC -Werror PUBLIC -Wextra
	PUBLIC -Wno-unused-parameter
)

# config
set(CONFIG_USING_NVBOARD "y")

# Check: sbt
set(SBT_PATH "/home/iplee/.local/share/coursier/bin/sbt")
if (NOT SBT_PATH)
	message(FATAL_ERROR "Install sbt and run startup.sh first!")
endif ()

# Check: verilator
find_package(verilator HINTS $ENV{VERILATOR_ROOT} ${VERILATOR_ROOT})
if (NOT verilator_FOUND)
	message(FATAL_ERROR "Verilator was not found. Either install it, or set the VERILATOR_ROOT environment variable")
endif ()

# Check: nvboard
set(NVBOARD_HOME "/home/iplee/Main/Proj/nscscc2023/proj_main/NVBoard")
if ((DEFINED NVBOARD_HOME) AND ("${CONFIG_USING_NVBOARD}" STREQUAL "y"))
	message("NVBoard Found : ${NVBOARD_HOME}")
	set(NVBOARD_LIB "${NVBOARD_HOME}/build/nvboard.a")
	set(NVBOARD_INC "${NVBOARD_HOME}/include")
	set(NVBOARD_CONSTR_PY "${NVBOARD_HOME}/scripts/auto_pin_bind.py")
	set(NVBOARD_AUTO_CONF_CPP "${PROJECT_BINARY_DIR}/auto_bind.cpp")
	target_link_libraries(sim PUBLIC ${NVBOARD_LIB})
	target_include_directories(sim PUBLIC ${NVBOARD_INC})
	add_custom_command(
		OUTPUT "${NVBOARD_AUTO_CONF_CPP}"
		COMMAND export NVBOARD_HOME=${NVBOARD_HOME}
		COMMAND python3 ${NVBOARD_CONSTR_PY} "sim_src/src/Top.nxdc" "${NVBOARD_AUTO_CONF_CPP}"
		DEPENDS sim_src/src/Top.nxdc
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
		VERBATIM
	)
	target_sources(sim PUBLIC "${NVBOARD_AUTO_CONF_CPP}")
	target_link_libraries(sim PUBLIC SDL2 PUBLIC SDL2_image)
	target_compile_definitions(sim PUBLIC "NVBOARD_HOME=\"/home/iplee/Main/Proj/nscscc2023/proj_main/NVBoard\"" HAS_NVBOARD)
else()
	message("NVBoard NOT found or not using!")
	target_compile_definitions(fTest PUBLIC "NVBOARD_HOME=\"\"")
endif ()



# ChiselFiles => VerilogFiles
file(GLOB_RECURSE CHISEL_FILES src/*.scala)
execute_process(
	COMMAND ${SBT_PATH} "runMain TopApp --target-dir sim_src/verilog_gen"
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	COMMAND_ECHO STDOUT
)
add_custom_target(
	generate_chisel
	COMMAND ${SBT_PATH} "runMain TopApp --target-dir sim_src/verilog_gen"
	COMMAND echo -e "\\033[0;33mNOTICE : GENERATED VERILOG FILES FROM CHISEL!\\033[0m"
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	DEPENDS "${CHISEL_FILES}"
	VERBATIM
)
add_dependencies(sim generate_chisel)

# Rule{VerilogFiles => GenCppFiles}
verilate(
	sim
	SOURCES sim_src/verilog_gen/Top.v
	TOP_MODULE Top
	TRACE_THREADS
	TRACE # TRACE_FST   # choose one
)

# Rule{Cpp => Exe}::user_src
target_sources(
	sim
	PUBLIC sim_src/src/main.cpp
)
